local monarch = require "monarch.monarch"

-- max speed right/left
local max_speed = 450
go.property("max_block_time", 4)
go.property("regen_speed", 0.25)
local input_left = hash("left")
local input_right = hash("right")
local input_up = hash("up")
local input_down = hash("down")
local input_attack = hash("attack")
local input_block = hash("block")
local display_width = sys.get_config("display.width")
local display_height = sys.get_config("display.height")
local is_blocking = false
local shield = nil
local weapon = nil
local current_block_time = 0
local elapsed_time = 0
local load_percentage = 0
local can_block = true
local attack_stll_active = false
local is_charging = false
local needs_recharge = false
local charge_speed = 1
local charged = false

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

	-- this lets us handle input in this script
	msg.post(".", "acquire_input_focus")
	
	-- activate camera attached to the player collection
	-- this will send camera updates to the render script
	msg.post("#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")

	self.input = vmath.vector3(0,0,0)
	self.direction = 0
	self.health = 100
	msg.post("/level#main_gui", "gui_update", { health = self.health })
	msg.post("#moving", "disable")
	msg.post("healthbar/indicator#healthbar", "health", { max_health = self.health, health = self.health})

	msg.post("healthbar/indicator#healthbar", "follow_me")
	msg.post("load_bar/indicator#healthbar", "follow_me")
	msg.post("load_bar/indicator#healthbar", "health", { max_health = 100, health = 0, auto_delete = false})
	go.set_parent("direction_arrow_pivot", ".", true)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function attack(self, charging, charge_attack)
	pprint(charge)
	if weapon ~= nil then
		return
	end
	local p = go.get_position()
	local component = "#weapon_factory"
	local props = {}
	if charging then
		props[hash("/arm")] = { 
			rotation = self.direction,
			swing_angle = 0,
			spawned_by = go.get_id(),
			duration_seconds = 60
		}
		props[hash("/weapon")] = { 
			damage = 1
		}
	elseif charge_attack then
		props[hash("/arm")] = { 
			rotation = self.direction,
			swing_angle = 360,
			spawned_by = go.get_id()
		}
		props[hash("/weapon")] = { 
			damage = 40
		}
	else -- Normal attack
		props[hash("/arm")] = { 
			rotation = self.direction,
			spawned_by = go.get_id()
		}
		props[hash("/weapon")] = { 
			damage = 10
		}
	end
	
	local weapons = collectionfactory.create(component, p, nil, props)
	
	-- we assume that only one weapon will be returned
	for k,v in pairs(weapons) do
		if k == hash("/arm") then
			weapon = weapons[k]
			break
		end
	end
	go.set_parent(weapon, go.get_id(), true)
	-- msg.post(weapon, "set_parent", { parent_id = go.get_id(), keep_world_transform = 1 }) -- <7>
end

local function block(self)
	if not can_block then
		return
	end
	msg.post("load_bar/indicator#healthbar", "health", { max_health = 100, health = 1})
	
	current_block_time = load_percentage * self.max_block_time
	
	is_blocking = true
	local component = "#shield_factory"
	local props = {}
	props[hash("/weapon")] = { 
		rotation = self.direction
	}

	local weapons = collectionfactory.create(component, p, nil, props)
	pprint(weapons)
	local weapon = nil
	-- we assume that only one weapon will be returned
	for k,v in pairs(weapons) do
		if k == hash("/arm") then
			weapon = weapons[k]
			break
		end
	end
	shield = weapon
	go.set_parent(shield, go.get_id(), true)
end

local function end_block(self)
	is_blocking = false
	if shield ~= nil then
		go.delete(shield, true)
		shield = nil
	end
end

function update(self, dt)
	elapsed_time = elapsed_time + dt
	
	-- Move the player
	local speed = 32 -- pixels per second
	local deltapos = self.input * speed * dt
	go.set_position(go.get_position() + deltapos)

	if vmath.length(self.input) == 0 then
		msg.post("#moving", "disable")
		msg.post("#idle", "enable")
	else
		msg.post("#moving", "enable")
		msg.post("#idle", "disable")
	end
	
	sprite.set_hflip("#moving", self.input.x < 0)
	self.input = vmath.vector3(0,0,0)

	go.set("direction_arrow_pivot", "euler.z", self.direction-90)

	-- rotate the shield 
	if shield ~= nil then
		go.set(shield, "euler.z", self.direction-90)
	end

	-- count shield time and drop if necessary
	if is_blocking then
		current_block_time = current_block_time + dt
		pprint(current_block_time)
		load_percentage = current_block_time / self.max_block_time
		if current_block_time > self.max_block_time then
			can_block = false
			end_block(self)
		end
	else
		load_percentage = math.max(0, load_percentage - self.regen_speed * dt)
		if load_percentage == 0 then
			can_block = true
			needs_recharge = false
		end
	end

	if is_charging  and not needs_recharge then
		load_percentage = math.max(0, load_percentage + charge_speed * dt)
		pprint(load_percentage)
		if load_percentage >= 1 then
			is_charging = false
			charged = true
		end
	end

	if charged then
		load_percentage = 1.0
	end

	msg.post("load_bar/indicator#healthbar", "health", { health = load_percentage * 100})
end

function angle_between_vectors(v0, v1)
	-- simplified to two dimensions
	return math.deg(math.atan2(v1.y*v0.x - v1.x*v0.y, v1.x*v0.x + v1.y*v0.y))
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function take_damage(self, dmg)
	particlefx.play("#hit")
	self.health = self.health - dmg
	msg.post("/level#main_gui", "gui_update", { health = self.health })

	msg.post("healthbar/indicator#healthbar", "health", { health = self.health})
	-- go.set("healthbar/go1#healthbar", "health", self.health)
	if self.health <= 0 then
		msg.post("screens:/controller#controller", "scene_change", {
			scene_name = "game_over"
		})
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
	if message_id == hash("send_dmg") then
		take_damage(self, message["dmg"])
	-- if message_id == hash("trigger_response") then
	-- 	-- print("always other id: " ..  msg.url(message['other_id']))
	-- 	-- print("last hit: " ..  msg.url(last_hit_by))
	-- 	-- pprint(message)
	-- 	if message.enter and hash("weapon_enemy") == message["other_group"] then
	-- 		-- pprint("Sender: " .. sender)
	-- 		-- pprint(message)
	-- 		local dmg = go.get(msg.url(nil, message.other_id, "weapon_swing"), "damage")
	-- 		take_damage(self, dmg)
	-- 	end
	end

	if message_id == hash("weapon_finished") then
		weapon = nil
		if charged then
			attack_stll_active = false
			is_charging = false
		end
		
		if attack_stll_active and not needs_recharge then
			attack(self, true)
			is_charging = true
		end
	end
end

function on_input(self, action_id, action)
	if action_id == input_left then
		self.input.x = -1
	elseif action_id == input_right then
		self.input.x = 1
	elseif action_id == input_up then
		self.input.y = 1
	elseif action_id == input_down then
		self.input.y = -1
	elseif action_id == input_attack and action.pressed then
		attack_stll_active = true
		attack(self, false)
	elseif action_id == input_attack and action.released then
		attack_stll_active = false
		if weapon ~= nil then
			go.delete(weapon, true)
			weapon = nil
		end
		if charged then
			attack(self, false, true)
			needs_recharge = true
		end
		charged = false
		is_charging = false
		
	elseif action_id == input_block and action.pressed then
		block(self)
	elseif action_id == input_block and action.released then
		end_block()
	elseif not action_id then -- action_id == nil, so this is a mouse movement event
		-- pprint(action)
		local inputVector = vmath.vector3(action.x, action.y, 0) - vmath.vector3(display_width / 2, display_height / 2, 0)
		local axisVector = vmath.vector3(0, 1, 0)
		if vmath.length(inputVector) ~= 0 then
			self.direction = -angle_between_vectors(inputVector, axisVector)
		end
	end

	if action_id == hash("raw") then
		local aim_x = action.gamepad_axis[3]
		local aim_y = action.gamepad_axis[4]
		local walk_x = action.gamepad_axis[1]
		local walk_y = -action.gamepad_axis[2]
		if aim_x ~= 0 or aim_y ~= 0 then
			local inputVector = vmath.vector3(-aim_x, aim_y, 0)
			local axisVector = vmath.vector3(0, -1, 0)
			pprint(inputVector)
			self.direction = -angle_between_vectors(inputVector, axisVector)
		end
		if walk_x ~= 0 or walk_y ~= 0 then
			self.input.x = walk_x
			self.input.y = walk_y
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
