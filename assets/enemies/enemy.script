local utils = require "game.utils"

local speed = 16 -- pixels per second
local last_wall_hit = os.clock()
local player_focus = false
local weapon = nil

go.property("attack_speed_seconds", 2)

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	
	self.direction = vmath.vector3(0,0,0)
	self.direction.y = (math.random(200)-100)/100 + self.direction.y
	self.direction.x = (math.random(200)-100)/100 + self.direction.x
	self.direction = vmath.normalize(self.direction)
	self.health = 100
	self.on_target = false
	self.target = nil
	self.enemy_direction = 0
	self.should_move = true
	
	msg.post("healthbar/indicator#healthbar", "health", { max_health = self.health,  health = self.health})
	msg.post("healthbar/indicator#healthbar", "follow_me")
	msg.post("#death", "disable")
end

function update(self, dt)
	if not self.should_move then 
		return
	end
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	if self.on_target then
		self.direction = vmath.normalize(go.get_position(self.target) - go.get_position())
	end
	
	local deltapos = self.direction * speed * dt
	go.set_position(go.get_position() + deltapos)
	sprite.set_hflip("#moving", self.direction.x < 0)
end

local function attack(self)
	if weapon ~= nil then
		return
	end
	
	local p = go.get_position()
	local component = "#weapon_factory"
	local props = {}
	props[hash("/arm")] = { 
		rotation = 0,
		swing_angle = 360,
		spawned_by = go.get_id()
	}
	weapons = collectionfactory.create(component, p, nil, props)
	pprint(weapons)
	self.weapon = msg.url(weapons["/weapon"])
	local weapon_physics = msg.url(nil, weapons["/weapon"], "collisionobject")
	physics.set_group(weapon_physics, "weapon_enemy")
	-- go.set_parent(mweapon, go.get_id())
	msg.post(msg.url(weapons["/arm"]), "set_parent", { parent_id = go.get_id(), keep_world_transform = 1 }) -- <7>
end

local function take_damage(self, dmg)
	particlefx.play("#hit")
	self.health = self.health - dmg
	msg.post("healthbar/indicator#healthbar", "health", { health = self.health})
	if self.health <= 0 then
		self.should_move = false
		timer.cancel(player_focus)
		if go_exists(self.weapon) then
			go.delete(self.weapon)
		end
		timer.cancel(player_focus)
		msg.post("#death", "enable")
		msg.post("#moving", "disable")
		timer.delay(1, false, function() go.delete() end)
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed

	-- Receive damage 
	if message_id == hash("send_dmg") then
		take_damage(self, message["dmg"])
	elseif message_id == hash("trigger_response") then
		-- If Player enters radar, set to follow him.
		-- If player leaves radar, set target to nil
		if hash("player") == message["other_group"] and hash("radar") == message["own_group"] then
			if message.enter  and self.health > 0 then
				self.on_target = true
				self.target = message["other_id"]
			elseif not message.enter then
				self.on_target = false
				self.target = nil
			end
		end
		-- If Player is in attack range, start atacking with given attack speed
		-- If Player leaves auto attack range, cancel auto attack
		if hash("player") == message["other_group"] and hash("auto_attack") == message["own_group"] then
			if message.enter then
				player_focus = timer.delay(self.attack_speed_seconds, true, attack)
				timer.trigger(player_focus)
			elseif not message.enter then
				timer.cancel(player_focus)
			end
		end
	-- If we collide with a wall, get a random new direction 
	elseif message_id == hash("collision_response") and os.clock() - last_wall_hit > 0.2 and message["group"] == hash("walls") then
		self.direction.y = (math.random(200)-100)/100 + self.direction.y
		self.direction.x = (math.random(200)-100)/100 + self.direction.x
		self.direction = vmath.normalize(self.direction)
		last_wall_hit = os.clock()
	-- This is used to reset the weapon, so that it can not spawn multiple times.
	elseif message_id == hash("weapon_finished") then
		weapon = nil
	end
end

